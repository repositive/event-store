"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const test_helpers_1 = require("./test-helpers");
const _1 = require(".");
// This test does nothing, but will fail to compile if Typescript finds errors, so should be left in
ava_1.test("typechecks createEvent", (t) => {
    const evt = _1.createEvent("foobar", "Baz", {
        foo: "hello",
        bar: 10,
    });
    t.pass();
});
ava_1.test('creates an event with default fields filled', (t) => {
    const evt = _1.createEvent('ns', 'Type', { foo: 'bar' });
    const expected = {
        id: test_helpers_1.id,
        data: {
            type: 'ns.Type',
            event_type: 'Type',
            event_namespace: 'ns',
            foo: 'bar',
        },
        context: {
            subject: {},
            time: '2018-01-02 03-04-05',
        },
    };
    t.deepEqual(evt.data, expected.data);
    t.deepEqual(evt.context.subject, expected.context.subject);
    t.is(typeof evt.context.time, 'string');
    t.true(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/i.test(evt.id));
});
ava_1.test('creates an event with a given context', (t) => {
    const evt = _1.createEvent('ns', 'Type', { foo: 'bar' }, { subject: { bar: 'baz' }, time: '2018-01-02 03-04-05' }, () => test_helpers_1.id);
    const expected = {
        id: test_helpers_1.id,
        data: {
            type: 'ns.Type',
            event_type: 'Type',
            event_namespace: 'ns',
            foo: 'bar',
        },
        context: {
            subject: { bar: 'baz' },
            time: '2018-01-02 03-04-05',
        },
    };
    t.deepEqual(evt, expected);
});
ava_1.test('creates a context with subject and no action', (t) => {
    const evt = _1.createEvent('ns', 'Type', { foo: 'bar' }, _1.createContext({ bar: 'baz' }), () => test_helpers_1.id);
    t.is(evt.context.action, undefined);
    t.deepEqual(evt.context.subject, { bar: 'baz' });
});
ava_1.test('creates a context with subject and an action', (t) => {
    const evt = _1.createEvent('ns', 'Type', { foo: 'bar' }, _1.createContext({ bar: 'baz' }, 'someRandomAction', () => '2018-01-02 03-04-05'), () => test_helpers_1.id);
    const expected = {
        action: 'someRandomAction',
        subject: { bar: 'baz' },
        time: '2018-01-02 03-04-05',
    };
    t.deepEqual(evt.context, expected);
});
ava_1.test('createEvent passes is Event', (t) => {
    const ev = _1.createEvent('ns', 'Type', {});
    t.truthy(_1.isEvent((o) => !!o)(ev));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2hlbHBlcnMudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUEyQjtBQUMzQixpREFBb0M7QUFDcEMsd0JBQXdGO0FBRXhGLG9HQUFvRztBQUNwRyxVQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQyxDQUFNLEVBQUUsRUFBRTtJQVN4QyxNQUFNLEdBQUcsR0FBMEIsY0FBVyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUU7UUFDOUQsR0FBRyxFQUFFLE9BQU87UUFDWixHQUFHLEVBQUUsRUFBRTtLQUNSLENBQUMsQ0FBQztJQUVILENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUNYLENBQUMsQ0FBQyxDQUFDO0FBRUgsVUFBSSxDQUFDLDZDQUE2QyxFQUFFLENBQUMsQ0FBTSxFQUFFLEVBQUU7SUFDN0QsTUFBTSxHQUFHLEdBQUcsY0FBVyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUV0RCxNQUFNLFFBQVEsR0FBRztRQUNmLEVBQUUsRUFBRixpQkFBRTtRQUNGLElBQUksRUFBRTtZQUNKLElBQUksRUFBRSxTQUFTO1lBQ2YsVUFBVSxFQUFFLE1BQU07WUFDbEIsZUFBZSxFQUFFLElBQUk7WUFDckIsR0FBRyxFQUFFLEtBQUs7U0FDWDtRQUNELE9BQU8sRUFBRTtZQUNQLE9BQU8sRUFBRSxFQUFFO1lBQ1gsSUFBSSxFQUFFLHFCQUFxQjtTQUM1QjtLQUNGLENBQUM7SUFFRixDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzRCxDQUFDLENBQUMs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